#!/usr/bin/env bun
import { fileURLToPath } from 'node:url';
import { dirname, relative, resolve } from 'node:path';
import { mkdirSync, writeFileSync } from 'node:fs';
import ts from 'typescript';

function log(message: string) {
  console.log(`[mava-dts] ${message}`);
}

const here = dirname(fileURLToPath(import.meta.url));
const projectRoot = resolve(here, '..');
const entry = resolve(projectRoot, 'Terminal', 'runtime', 'mava.types.ts');
const output = resolve(projectRoot, 'Terminal', 'mava.api.d.ts');

const options: ts.CompilerOptions = {
  declaration: true,
  emitDeclarationOnly: true,
  skipLibCheck: true,
  stripInternal: true,
  module: ts.ModuleKind.ESNext,
  target: ts.ScriptTarget.ES2021,
};

const host = ts.createCompilerHost(options, true);
const emitted: Record<string, string> = {};
host.writeFile = (fileName, text) => {
  emitted[fileName] = text;
};

const program = ts.createProgram([entry], options, host);
const emitResult = program.emit();

const diagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics ?? []);
if (diagnostics.length) {
  const formatted = diagnostics.map((d) => {
    const msg = ts.flattenDiagnosticMessageText(d.messageText, '\n');
    if (d.file) {
      const { line, character } = d.file.getLineAndCharacterOfPosition(d.start ?? 0);
      const rel = relative(projectRoot, d.file.fileName);
      return `${rel}:${line + 1}:${character + 1} - ${msg}`;
    }
    return msg;
  });
  throw new Error(`TypeScript diagnostics:\n${formatted.join('\n')}`);
}

const dtsFile = Object.keys(emitted).find((f) => f.endsWith('mava.types.d.ts'));
if (!dtsFile) {
  throw new Error('Failed to locate generated declaration output for mava.types.ts');
}

let dts = emitted[dtsFile];

// Remove module-related syntax to produce ambient declarations
const lines = dts
  .split('\n')
  .filter((line) => !/^import\s+/u.test(line.trim()) && !/^export\s+\{/u.test(line.trim()))
  .map((line) => line.replace(/^export\s+(?=declare\s)/u, '').replace(/^export\s+/u, ''));

dts = lines.join('\n').trim() + '\n';

const header = `// Generated by tools/generate-mava-dts.ts on ${new Date().toISOString()}\n// Do not edit this file directly; run \"bun tools/generate-mava-dts.ts\" instead.\n`;
const footer = '\ndeclare const Mava: MavaAPI;\n';

const final = `${header}\n${dts}${footer}`;

mkdirSync(dirname(output), { recursive: true });
writeFileSync(output, final, 'utf8');

log(`Wrote ${relative(projectRoot, output)}`);